package Social;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.Collections;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String mail) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setNickname(name);
        n.setMail(mail);
        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/delete")
    public @ResponseBody Iterable<User> deleteUser(@RequestParam int id) {
        // This returns a JSON or XML with the users
        return userRepository.deleteById();
    }

    @GetMapping(path="/get")
    public @ResponseBody Iterable<User> getUser(@RequestParam int id) {
        // This returns a JSON or XML with the users
        return (Iterable<User>) userRepository.findAllById(Collections.singleton(id));
    }

    /*@GetMapping(path="/post")
    public @ResponseBody Iterable<User> getUser(@RequestParam int id) {
        // This returns a JSON or XML with the users
        return (Iterable<User>) userRepository.findAllById(Collections.singleton(id));
    }

    @GetMapping(path="/put")
    public @ResponseBody Iterable<User> getUser(@RequestParam int id) {
        // This returns a JSON or XML with the users
        return (Iterable<User>) userRepository.findAllById(Collections.singleton(id));
    }
*/
    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}
